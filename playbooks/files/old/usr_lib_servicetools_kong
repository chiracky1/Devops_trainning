#!/usr/bin/perl

use strict;
use Socket;
use File::Basename qw( fileparse );
use File::Path qw( make_path );
use Sys::Hostname;
use POSIX;
use Config;

my($ACTION);
my($PATH);
my($CONF);
my($CONF_NGINX);
#my($UID);
my($GID);
my($MODE);
my($KONGBIN);
my($KONG_PATH);
my($KONG_PID);
my(@LOGFILES);
my($NAME);
my($GZIP);
my($AXIME_TARGET);
my($CLIENT);
my($SITE);
my($KEY_FILE);

BEGIN {
        push(@INC, '/usr/lib/servicetools') ;
}

require '/usr/lib/servicetools/libressource.pl';

if (scalar(@ARGV) == 4) {
        ($PATH,$CONF,$CONF_NGINX,$ACTION) = @ARGV;
        pop @ARGV;
} else {
        print STDERR "[ERROR - SVT-RSC-0001] : Wrong number of arguments !!\n";
        print STDERR "Usage : kong <ACTION> -c <CONF> --nginx-conf <CONF_NGINX> -p <PATH>  \n";
        print STDERR "\t<PATH> : Root folder where Kong will run\n";
        print STDERR "\t<CONF> : Kong conf filename (i.e /WEBS/xxx/kong.yyy.com/kong.conf)\n";
                print STDERR "\t<CONF_NGINX> : Nginx kong template filename (i.e /WEBS/xxx/kong.yyy.com/nginx_template.conf)\n";
        print STDERR "\t<ACTION> : Action to perform : start, stop or status.\n\n";
        exit 1;
}

$NAME="kong";

#$UID="www";
$GID="server";
$MODE="644";

$KONGBIN="/usr/local/bin/".$NAME;

$GZIP = "/bin/gzip";

$AXIME_TARGET = "tsta.data.priv.atos.fr";	# var pour axime SCP
$CLIENT = "carrefour_fr";
$SITE = "kong.carrefourcourses.com";
$KEY_FILE = "/home/stat/.ssh/id_dsa";

if (open(my $fh, $PATH."/pids/nginx.pid")){
	my $row;
	while (my $fh = <$fh>){
		chomp $row;
		$KONG_PID=$row;
	}
}

sub ps
{
	my $ret = 0;

	my $pidFile = $PATH."/pids/nginx.pid";

	my $filesize = -s $pidFile;

	if ($filesize > 0){
		my $cmd = "ps -ef| grep -v grep | grep `cat $pidFile` |";
		open(PS_F, $cmd);
		while (<PS_F>) {
			$ret = 1;
			last();
		}
		close(PS_F);
	}

	return $ret;
}

sub start
{
	my $ret = 0;
	
	bold_print("[".$NAME."]") &&  print (" Starting Kong from file $CONF ... ");

	my $cmd = $KONGBIN." start -c ".$CONF." --nginx-conf ".$CONF_NGINX." -p ".$PATH." >> /dev/null";
	system($cmd);

	sleep(1);

	if (ps() == 1){
		success_print("done\n");
	}else{
		fail_print("failed");
	}
}

sub stop
{
	my $ret = ps();

	bold_print("[".$NAME."]") &&  print (" Stopping Kong ... ");

	my $cmd = $KONGBIN." stop -p ".$PATH." >> /dev/null";
	system($cmd);

	sleep(5);

	if ($ret == 1){
		success_print("done\n");
	}else{
		fail_print("failed");
	}

	return $ret;
}

sub status
{
	my $ret = ps();

	bold_print("[".$NAME."]") &&  print (" Checking Kong ... ");

	if ($ret == 1){
		success_print("running\n");
	}else{
		stop_print("stopped\n");
	}

	return $ret;
}

sub rotate
{

	my($DATE) = simpleDate();
	my($LONG_DATE) = fullDate();
	my(@gzip_logs);
	my $logs_dir = $PATH."/logs/";
	my $arch_dir = $logs_dir."/archives/";
	my $accesslog_file = "access.log";
	my $adminlog_file = "admin_access.log";
	my $errorlog_file = "error.log";
	my $OUTPUT_DIR = "/WEBARCHIVES/".$CLIENT."/".$SITE;
	my(@axime_logs);
	
	if ( !-d $arch_dir ) {
		make_path $arch_dir or die "Failed to create path: ".$arch_dir;
		my $cmd10 = "chown -R www:server ".$arch_dir;
		system($cmd10);
	}

	if ( !-d $logs_dir ) {
		make_path $logs_dir or die "Failed to create path: ".$logs_dir;
		my $cmd20 = "chown -R www:server ".$logs_dir;
		system($cmd20);
	}
	
	stop();

	if (-f $logs_dir.$accesslog_file) {
		my $cmd1 = "cat ".$logs_dir.$accesslog_file." >> ".$arch_dir.$accesslog_file.".".$LONG_DATE."; chown www:server ".$arch_dir.$accesslog_file.".".$LONG_DATE."; rm -f ".$logs_dir.$accesslog_file;
		system($cmd1);
		push(@gzip_logs, $arch_dir.$accesslog_file.".".$LONG_DATE);
	}

	if (-f $logs_dir.$adminlog_file) {
		my $cmd2 = "cat ".$logs_dir.$adminlog_file." >> ".$arch_dir.$adminlog_file.".".$LONG_DATE."; chown www:server ".$arch_dir.$adminlog_file.".".$LONG_DATE."; rm -f ".$logs_dir.$adminlog_file;
		system($cmd2);
		push(@gzip_logs, $arch_dir.$adminlog_file.".".$LONG_DATE);
	}

	if (-f $logs_dir.$errorlog_file) {
		my $cmd3 = "cat ".$logs_dir.$errorlog_file." >> ".$arch_dir.$errorlog_file.".".$LONG_DATE."; chown www:server ".$arch_dir.$errorlog_file.".".$LONG_DATE."; rm -f ".$logs_dir.$errorlog_file;
		system($cmd3);
		push(@gzip_logs, $arch_dir.$errorlog_file.".".$LONG_DATE);
	}

	# Gzip the previous rotated log files
	foreach (@gzip_logs) {
		my $cmdX = $GZIP." $_";
		system($cmdX);
	}
	
	# Sending ACCESS to AXIME 	
	my $DEST_FILE = $accesslog_file.".".$LONG_DATE.".".hostname().".gz";
	my $SOURCE_FILE = $arch_dir.$accesslog_file.".".$LONG_DATE.".gz";
	
    my $cmdscpaccess = "scp -o ConnectTimeout=5 -o stricthostkeychecking=no -o compression=no -i ".$KEY_FILE." ".$SOURCE_FILE." www@".$AXIME_TARGET.":".$OUTPUT_DIR."/".$DEST_FILE." > /dev/null 2>&1;";
	system($cmdscpaccess);
	
	# Sending ERROR to AXIME 
	$DEST_FILE = $errorlog_file.".".$LONG_DATE.".".hostname().".gz";
	$SOURCE_FILE = $arch_dir.$errorlog_file.".".$LONG_DATE.".gz";
	
    my $cmdscperror = "scp -o ConnectTimeout=5 -o stricthostkeychecking=no -o compression=no -i ".$KEY_FILE." ".$SOURCE_FILE." www@".$AXIME_TARGET.":".$OUTPUT_DIR."/".$DEST_FILE." > /dev/null 2>&1;";
	system($cmdscperror);
	
	# Sending ADMIN to AXIME 
	$DEST_FILE = $adminlog_file.".".$LONG_DATE.".".hostname().".gz";
	$SOURCE_FILE = $arch_dir.$adminlog_file.".".$LONG_DATE.".gz";
	
    my $cmdscpadmin = "scp -o ConnectTimeout=5 -o stricthostkeychecking=no -o compression=no -i ".$KEY_FILE." ".$SOURCE_FILE." www@".$AXIME_TARGET.":".$OUTPUT_DIR."/".$DEST_FILE." > /dev/null 2>&1;";
	system($cmdscpadmin);
# INtervention du 18032019
        my $dateArchive = `date -d "-30 days" +%y%m%d."*"`;
        my $deleteAdminLog = "rm ".$arch_dir.$adminlog_file.".".$dateArchive;
        system($deleteAdminLog);

        my $deleteAccessLog = "rm ".$arch_dir.$accesslog_file.".".$dateArchive;
        system($deleteAccessLog);

        my $deleteErrorLog = "rm ".$arch_dir.$errorlog_file.".".$dateArchive;
        system($deleteErrorLog);
# INtervention du 18032019

	start();
}

# Execute action
if ($ACTION eq "status") {
	status() ? exit 0 : exit 1;
} elsif ($ACTION eq "start") {
	if (status() == 0) {start() ? exit 0 : exit 1;}
	else {exit 0;}
} elsif ($ACTION eq "stop") {
	if (status() == 1) {stop() ? exit 0 : exit 1;}
	else {exit 0;}
} elsif ($ACTION eq "info") {
	if (status() == 1) {info() ? exit 0 : exit 1;}
	else {exit 0;}
} elsif ($ACTION eq "rotate") {
	if (status() == 1) {rotate() ? exit 0 : exit 1;}
	else {exit 0;}
}



